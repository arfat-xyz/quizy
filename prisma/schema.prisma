generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
  TEST

  @@map("Role")
}

enum QuestionType {
  MCQ
  TEXT
}

model User {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  userName       String?         @unique
  email          String?         @unique
  password       String?
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  role           Role            @default(USER)
  // Optional for WebAuthn support
  authenticators Authenticator[]

  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  AssignedTest    AssignedTest[]
  UserTestSession UserTestSession[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  // identifier String
  token   String
  email   String
  expires DateTime

  @@unique([email, token])
}

model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String
  expires DateTime

  createdAt DateTime @default(now())

  @@unique([email, token])
  @@map("password_reset_tokens")
}

model Position {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name  String @unique
  tests Test[]
}

model Group {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  name       String      @unique
  questions  Question[]
  testGroups TestGroup[]
}

model Test {
  id            String            @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  position      Position          @relation(fields: [positionId], references: [id])
  positionId    String            @db.ObjectId
  date          DateTime
  durationMin   Int
  testGroups    TestGroup[]
  assignedTests AssignedTest[]
  testSessions  UserTestSession[]
  TestQuestion  TestQuestion[]
}

model TestGroup {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  testId  String @db.ObjectId
  groupId String @db.ObjectId
  order   Int
  test    Test   @relation(fields: [testId], references: [id])
  group   Group  @relation(fields: [groupId], references: [id])
}

model AssignedTest {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  user            User     @relation(fields: [userId], references: [id])
  userId          String   @db.ObjectId
  test            Test     @relation(fields: [testId], references: [id])
  testId          String   @db.ObjectId
  assignedAt      DateTime @default(now())
  loginToken      String?
  credentialsSent Boolean  @default(false)
}

model UserTestSession {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  user        User         @relation(fields: [userId], references: [id])
  userId      String       @db.ObjectId
  test        Test         @relation(fields: [testId], references: [id])
  testId      String       @db.ObjectId
  startedAt   DateTime
  endedAt     DateTime?
  submitted   Boolean      @default(false)
  totalScore  Float        @default(0)
  userAnswers UserAnswer[]
}

// model Group {
//   id        String     @id @default(auto()) @map("_id") @db.ObjectId
//   name      String
//   test      Test       @relation(fields: [testId], references: [id])
//   testId    String     @db.ObjectId
//   questions Question[]
// }

model Question {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  group         Group          @relation(fields: [groupId], references: [id])
  groupId       String         @db.ObjectId
  text          String
  type          QuestionType
  score         Int
  correct       Int? // MCQ only
  choices       Choice[]
  userAnswers   UserAnswer[]
  testQuestions TestQuestion[]
  createdAt     DateTime       @default(now())
}

model TestQuestion {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  test       Test     @relation(fields: [testId], references: [id])
  testId     String   @db.ObjectId
  question   Question @relation(fields: [questionId], references: [id])
  questionId String   @db.ObjectId
  order      Int // Optional: order in test
}

model Choice {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  text       String
  question   Question @relation(fields: [questionId], references: [id])
  questionId String   @db.ObjectId
  index      Int // Unique index to match against correct answer
}

model UserAnswer {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  testSession   UserTestSession @relation(fields: [testSessionId], references: [id])
  testSessionId String          @db.ObjectId
  question      Question        @relation(fields: [questionId], references: [id])
  questionId    String          @db.ObjectId
  response      String // For MCQ: choice index as string; for TEXT: answer
  autoScore     Float? // For MCQ
  givenScore    Float? // For TEXT (manual evaluation)
}
